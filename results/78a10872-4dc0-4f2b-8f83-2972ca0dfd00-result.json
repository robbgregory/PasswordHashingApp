{"name": "test_post_hash_endpoint", "status": "broken", "statusDetails": {"message": "requests.exceptions.MissingSchema: Invalid URL '/AddMessage': No schema supplied. Perhaps you meant http:///AddMessage?", "trace": "base_url = 'http://127.0.0.1:8088/', hash_endpoint = '/hash', post_payload = {'password': 'robertg12345'}, headers = {'Accept': 'application/json', 'Content-Type': 'application/json'}\n\n    @mark.smoke  # Include as part of smoke tests\n    @mark.regression  # Include as part of regression tests\n    @mark.password_hash  # Include as part of password_hash test suite\n    # Creating post request test for hash endpoint\n    def test_post_hash_endpoint(base_url, hash_endpoint, post_payload, headers):\n        url = base_url + hash_endpoint\n        payload = post_payload\n        headers = headers\n    \n>       response = requests.post(\"/AddMessage\", url, headers=headers, json=json.dumps(post_payload))  # Create variable to capture response\n\ntests\\password_hashing\\functional_tests\\test_password_hash.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\requests\\api.py:119: in post\n    return request('post', url, data=data, json=json, **kwargs)\nvenv\\lib\\site-packages\\requests\\api.py:61: in request\n    return session.request(method=method, url=url, **kwargs)\nvenv\\lib\\site-packages\\requests\\sessions.py:528: in request\n    prep = self.prepare_request(req)\nvenv\\lib\\site-packages\\requests\\sessions.py:456: in prepare_request\n    p.prepare(\nvenv\\lib\\site-packages\\requests\\models.py:316: in prepare\n    self.prepare_url(url, params)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <PreparedRequest [POST]>, url = '/AddMessage', params = OrderedDict()\n\n    def prepare_url(self, url, params):\n        \"\"\"Prepares the given HTTP URL.\"\"\"\n        #: Accept objects that have string representations.\n        #: We're unable to blindly call unicode/str functions\n        #: as this will include the bytestring indicator (b'')\n        #: on python 3.x.\n        #: https://github.com/psf/requests/pull/2238\n        if isinstance(url, bytes):\n            url = url.decode('utf8')\n        else:\n            url = unicode(url) if is_py2 else str(url)\n    \n        # Remove leading whitespaces from url\n        url = url.lstrip()\n    \n        # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n        # `data` etc to work around exceptions from `url_parse`, which\n        # handles RFC 3986 only.\n        if ':' in url and not url.lower().startswith('http'):\n            self.url = url\n            return\n    \n        # Support for unicode domain names and paths.\n        try:\n            scheme, auth, host, port, path, query, fragment = parse_url(url)\n        except LocationParseError as e:\n            raise InvalidURL(*e.args)\n    \n        if not scheme:\n            error = (\"Invalid URL {0!r}: No schema supplied. Perhaps you meant http://{0}?\")\n            error = error.format(to_native_string(url, 'utf8'))\n    \n>           raise MissingSchema(error)\nE           requests.exceptions.MissingSchema: Invalid URL '/AddMessage': No schema supplied. Perhaps you meant http:///AddMessage?\n\nvenv\\lib\\site-packages\\requests\\models.py:390: MissingSchema"}, "start": 1622940116509, "stop": 1622940116515, "uuid": "483d66b5-24d9-4660-8185-945323030cef", "historyId": "5f88e1f6f2981b340b956487bf1150ee", "testCaseId": "7230d199f8f39f0f09bf28d30155cc8b", "fullName": "tests.password_hashing.functional_tests.test_password_hash#test_post_hash_endpoint", "labels": [{"name": "tag", "value": "smoke"}, {"name": "tag", "value": "regression"}, {"name": "tag", "value": "password_hash"}, {"name": "parentSuite", "value": "tests.password_hashing.functional_tests"}, {"name": "suite", "value": "test_password_hash"}, {"name": "host", "value": "LAPTOP-HC2OU9BU"}, {"name": "thread", "value": "20304-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.password_hashing.functional_tests.test_password_hash"}]}